/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright (C) 2011-2012 OpenFOAM Foundation
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

\*---------------------------------------------------------------------------*/

#include "Thermo.H"

// * * * * * * * * * * * * * Private Member Functions  * * * * * * * * * * * //

template<class thermo, template<class> class Type>
inline Foam::species::Thermo<thermo, Type>::thermo
(
    const Thermo& sp
)
:
    Thermo(sp)
{}


template<class thermo, template<class> class Type>
inline Foam::scalar Foam::species::Thermo<thermo, Type>::T
(
    scalar f,
    scalar p,
    scalar T0,
    scalar (thermo<Thermo, Type>::*F)(const scalar, const scalar) const,
    scalar (thermo<Thermo, Type>::*dFdT)(const scalar, const scalar)
        const,
    scalar (thermo<Thermo, Type>::*limit)(const scalar) const
) const
{
    scalar Test = T0;
    scalar Tnew = T0;
    scalar Tmin = 0;
    scalar Tmax = 0;
    scalar Ttol = T0*tol_;
    int    iter = 0;
    bool newton = true;
    Info << "T(), T0:" << T0 << ", p:" << p << ", f: " << f << endl;
    do
    {
        Test = Tnew;
	if(newton == true)
	{
	  scalar A = (this->*F)(p, Test);
	  scalar B = (this->*dFdT)(p, Test);
	  
	  Tnew =
	      (this->*limit)
	      (Test - (A - f)/B);
	  
	  /*
	  Info << "Test: " << Test << ", F:" << A << ", dFdT: " << B << endl;
	  Info << "h(Test) - h0:" << A-f << endl;
	  Info << "(h(Test) - h0)/cp(Test)" << 0.5 * (A-f)/B << endl;
	  Info << Test << " --> " << Tnew << endl;
	  */
	}
	else
	{
	  Tnew = (Tmin + Tmax) / 2; // new midpoint
	  scalar A = (this->*F)(p, Tnew);
	  //new interval
	  if(sign(A - f) == -1)
	    Tmin = Tnew;
	  else
	    Tmax = Tnew;
	}
        if (iter++ > maxIter_)
        {
	    //Info << "max iter, Tmin: " << Tmin << ", Tmax: " << Tmax << endl;
	    //When two values of the function were found with different signs, switch over to the slower, but more robust secant method
	    if(newton == true)
	    {
	      //Info << "Switching from newton method to bisection, now searching for proper boundaries" << endl;
	      newton = false;
	      //find min / max values
	      Tmin = T0;
	      int i = 0;
	      for(i = 0; i < 1000; i++)
	      {
		Tmin *= 0.9;
		if(sign((this->*F)(p, Tmin) - f) == -1)
		  break;
	      }
	      if(i == 999)
		FatalErrorIn
		(
		    "thermo<Thermo, Type>::T(scalar f, scalar T0, "
		    "scalar (thermo<Thermo, Type>::*F)"
		    "(const scalar) const, "
		    "scalar (thermo<Thermo, Type>::*dFdT)"
		    "(const scalar) const, "
		    "scalar (thermo<Thermo, Type>::*limit)"
		    "(const scalar) const"
		    ") const"
		)   << "Failed to find minimum temperature for bisection method."
		    << abort(FatalError);
		      
	      Tmax = T0;
	      for(i = 0; i < 1000; i++)
	      {
		Tmax *= 1.1;
		if(sign((this->*F)(p, Tmax) - f) == 1)
		  break;
	      }
	      if(i == 999)
		FatalErrorIn
		(
		    "thermo<Thermo, Type>::T(scalar f, scalar T0, "
		    "scalar (thermo<Thermo, Type>::*F)"
		    "(const scalar) const, "
		    "scalar (thermo<Thermo, Type>::*dFdT)"
		    "(const scalar) const, "
		    "scalar (thermo<Thermo, Type>::*limit)"
		    "(const scalar) const"
		    ") const"
		)   << "Failed to find maximum temperature for bisection method."
		    << abort(FatalError);
	    }
	    else // In this case there are no known values from both sides of the root, so it can't be found with the bisection method
	      FatalErrorIn
	      (
		  "thermo<Thermo, Type>::T(scalar f, scalar T0, "
		  "scalar (thermo<Thermo, Type>::*F)"
		  "(const scalar) const, "
		  "scalar (thermo<Thermo, Type>::*dFdT)"
		  "(const scalar) const, "
		  "scalar (thermo<Thermo, Type>::*limit)"
		  "(const scalar) const"
		  ") const"
	      )   << "Maximum number of iterations (" << maxIter_ << ") exceeded"
		  << abort(FatalError);
	     iter = 0; // Start again with bisection method
        }

    } while (mag(Tnew - Test) > Ttol);
    //Info << "New temperature: " << Tnew << endl;
    return Tnew;
}

// * * * * * * * * * * * * * * * * Constructors  * * * * * * * * * * * * * * //

template<class thermo, template<class> class Type>
inline Foam::species::Thermo<thermo, Type>::thermo
(
    const word& name,
    const thermo& st
)
:
    Thermo(name, st)
{}


// * * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * //

// template<class thermo, template<class> class Type>
// inline Foam::word
// Foam::species::Thermo<thermo, Type>::heName()
// {
//     return Type<thermo<Thermo, Type> >::name();
// }


template<class thermo>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::he(const scalar p, const scalar T) const
{
    return Type<thermo<Thermo, Type> >::he(*this, p, T);
}


template<class thermo, template<class> class Type>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::cv(const scalar p, const scalar T) const
{
    return this->cp(p, T) - this->cpMcv(p, T);
}


template<class thermo, template<class> class Type>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::cpv(const scalar p, const scalar T) const
{
    return Type<thermo<Thermo, Type> >::cpv(*this, p, T);
}


template<class thermo, template<class> class Type>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::gamma(const scalar p, const scalar T) const
{
    scalar cp = this->cp(p, T);
    return cp/(cp - this->cpMcv(p, T));
}


template<class thermo, template<class> class Type>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::cpBycpv
(
    const scalar p,
    const scalar T
) const
{
    return Type<thermo<Thermo, Type> >::cpBycpv(*this, p, T);
}


template<class thermo, template<class> class Type>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::es(const scalar p, const scalar T) const
{
    return this->hs(p, T) - p*this->W()/this->rho(p, T);
}


template<class thermo, template<class> class Type>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::e(const scalar p, const scalar T) const
{
    return this->ha(p, T) - p*this->W()/this->rho(p, T);
}


template<class thermo, template<class> class Type>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::g(const scalar p, const scalar T) const
{
    return this->ha(p, T) - T*this->s(p, T);
}


template<class thermo, template<class> class Type>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::a(const scalar p, const scalar T) const
{
    return this->ea(p, T) - T*this->s(p, T);
}


template<class thermo, template<class> class Type>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::Cpv(const scalar p, const scalar T) const
{
    return this->cpv(p, T)/this->W();
}


template<class thermo, template<class> class Type>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::Cp(const scalar p, const scalar T) const
{
    return this->cp(p, T)/this->W();
}


template<class thermo, template<class> class Type>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::Cv(const scalar p, const scalar T) const
{
    return this->cv(p, T)/this->W();
}


template<class thermo, template<class> class Type>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::H(const scalar p, const scalar T) const
{
    return Type<thermo<Thermo, Type> >::HE(*this, p, T);
}


template<class thermo, template<class> class Type>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::Hs(const scalar p, const scalar T) const
{
    return this->hs(p, T)/this->W();
}


template<class thermo, template<class> class Type>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::Hc() const
{
    return this->hc()/this->W();
}


template<class thermo, template<class> class Type>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::Ha(const scalar p, const scalar T) const
{
    return this->ha(p, T)/this->W();
}


template<class thermo, template<class> class Type>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::S(const scalar p, const scalar T) const
{
    return this->s(p, T)/this->W();
}


template<class thermo, template<class> class Type>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::E(const scalar p, const scalar T) const
{
    return this->e(p, T)/this->W();
}


template<class thermo, template<class> class Type>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::Es(const scalar p, const scalar T) const
{
    return this->es(p, T)/this->W();
}

template<class thermo, template<class> class Type>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::Ea(const scalar p, const scalar T) const
{
    return this->ea(p, T)/this->W();
}


template<class thermo, template<class> class Type>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::G(const scalar p, const scalar T) const
{
    return this->g(p, T)/this->W();
}


template<class thermo, template<class> class Type>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::A(const scalar p, const scalar T) const
{
    return this->a(p, T)/this->W();
}


template<class thermo, template<class> class Type>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::K(const scalar p, const scalar T) const
{
    scalar arg = -this->nMoles()*this->g(p, T)/(this->RR*T);

    if (arg < 600.0)
    {
        return exp(arg);
    }
    else
    {
        return VGREAT;
    }
}


template<class thermo, template<class> class Type>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::Kp(const scalar p, const scalar T) const
{
    return K(p, T);
}


template<class thermo, template<class> class Type>
inline Foam::scalar
Foam::species::Thermo<thermo, Type>::Kc(const scalar p, const scalar T) const
{
    if (equal(this->nMoles(), SMALL))
    {
        return Kp(p, T);
    }
    else
    {
        return Kp(p, T)*pow(this->Pstd/(this->RR*T), this->nMoles());
    }
}


template<class thermo, template<class> class Type>
inline Foam::scalar Foam::species::Thermo<thermo, Type>::Kx
(
    const scalar p,
    const scalar T
) const
{
    if (equal(this->nMoles(), SMALL))
    {
        return Kp(p, T);
    }
    else
    {
        return Kp(p, T)*pow(this->Pstd/p, this->nMoles());
    }
}


template<class thermo, template<class> class Type>
inline Foam::scalar Foam::species::Thermo<thermo, Type>::Kn
(
    const scalar p,
    const scalar T,
    const scalar n
) const
{
    if (equal(this->nMoles(), SMALL))
    {
        return Kp(p, T);
    }
    else
    {
        return Kp(p, T)*pow(n*this->Pstd/p, this->nMoles());
    }
}


template<class thermo, template<class> class Type>
inline Foam::scalar Foam::species::Thermo<thermo, Type>::THE
(
    const scalar he,
    const scalar p,
    const scalar T0
) const
{
    return Type<thermo<Thermo, Type> >::THE(*this, he, p, T0);
}


template<class thermo, template<class> class Type>
inline Foam::scalar Foam::species::Thermo<thermo, Type>::THs
(
    const scalar hs,
    const scalar p,
    const scalar T0
) const
{
    return T
    (
        hs,
        p,
        T0,
        &thermo<Thermo, Type>::Hs,
        &thermo<Thermo, Type>::Cp,
        &thermo<Thermo, Type>::limit
    );
}


template<class thermo, template<class> class Type>
inline Foam::scalar Foam::species::Thermo<thermo, Type>::TH
(
    const scalar ha,
    const scalar p,
    const scalar T0
) const
{
    return T
    (
        ha,
        p,
        T0,
        &thermo<Thermo, Type>::H,
        &thermo<Thermo, Type>::Cp,
        &thermo<Thermo, Type>::limit
    );
}


template<class thermo, template<class> class Type>
inline Foam::scalar Foam::species::Thermo<thermo, Type>::TEs
(
    const scalar es,
    const scalar p,
    const scalar T0
) const
{
    return T
    (
        es,
        p,
        T0,
        &thermo<Thermo, Type>::Es,
        &thermo<Thermo, Type>::Cv,
        &thermo<Thermo, Type>::limit
    );
}


template<class thermo, template<class> class Type>
inline Foam::scalar Foam::species::Thermo<thermo, Type>::TE
(
    const scalar ea,
    const scalar p,
    const scalar T0
) const
{
    return T
    (
        ea,
        p,
        T0,
        &thermo<Thermo, Type>::E,
        &thermo<Thermo, Type>::Cv,
        &thermo<Thermo, Type>::limit
    );
}


// * * * * * * * * * * * * * * * Member Operators  * * * * * * * * * * * * * //

template<class thermo, template<class> class Type>
inline void Foam::species::Thermo<thermo, Type>::operator+=
(
    const thermo<Thermo, Type>& st
)
{
    Thermo::operator+=(st);
}


template<class thermo, template<class> class Type>
inline void Foam::species::Thermo<thermo, Type>::operator-=
(
    const thermo<Thermo, Type>& st
)
{
    Thermo::operator-=(st);
}


template<class thermo, template<class> class Type>
inline void Foam::species::Thermo<thermo, Type>::operator*=(const scalar s)
{
    Thermo::operator*=(s);
}


// * * * * * * * * * * * * * * * Friend Operators  * * * * * * * * * * * * * //

template<class thermo, template<class> class Type>
inline Foam::species::Thermo<thermo, Type> Foam::species::operator+
(
    const thermo<Thermo, Type>& st1,
    const thermo<Thermo, Type>& st2
)
{
    return thermo<Thermo, Type>
    (
        static_cast<const Thermo&>(st1) + static_cast<const Thermo&>(st2)
    );
}


template<class thermo, template<class> class Type>
inline Foam::species::Thermo<thermo, Type> Foam::species::operator-
(
    const thermo<Thermo, Type>& st1,
    const thermo<Thermo, Type>& st2
)
{
    return thermo<Thermo, Type>
    (
        static_cast<const Thermo&>(st1) - static_cast<const Thermo&>(st2)
    );
}


template<class thermo, template<class> class Type>
inline Foam::species::Thermo<thermo, Type> Foam::species::operator*
(
    const scalar s,
    const thermo<Thermo, Type>& st
)
{
    return thermo<Thermo, Type>
    (
        s*static_cast<const Thermo&>(st)
    );
}


template<class thermo, template<class> class Type>
inline Foam::species::Thermo<thermo, Type> Foam::species::operator==
(
    const thermo<Thermo, Type>& st1,
    const thermo<Thermo, Type>& st2
)
{
    return st2 - st1;
}


// ************************************************************************* //
